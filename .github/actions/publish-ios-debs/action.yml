name: Publish iOS packages
description: Downloads iOS assets, followed by packaging and publishing them
inputs:
  repo:
    required: true
    path: Repository to publish to; set to either “production” or “development”
runs:
  using: composite
  steps:
    - name: Download iOS assets
      uses: dawidd6/action-download-artifact@v2
      with:
        name: ios-assets
        path: ios-assets/
        run_id: 3182942497
    - name: Create frida-server iOS .deb
      run: |
        mkdir release-assets
        frida-core/tools/package-server-ios.sh \
            ios-assets \
            release-assets/frida_${FRIDA_VERSION}_iphoneos-arm.deb
      shell: bash
    - name: Create iOS repo metadata
      run: |
        mkdir ios-repo-config
        (
          echo "Origin: Cydia/Frida"
          echo "Label: frida"
          echo "Suite: stable"
          echo "Version: 1.0"
          echo "Codename: stable"
          echo "Architectures: iphoneos-arm"
          echo "Components: main"
          echo "Description: Frida for iOS"
        ) > ios-repo-config/distributions
        mkdir -p ios-repo/debs
        cp release-assets/frida_*_iphoneos-*.deb ios-repo/debs/
        cd ios-repo
        (
          echo "Origin: Frida"
          echo "Label: Frida"
          echo "Suite: stable"
          echo "Version: 1.0"
          echo "Codename: ios"
          echo "Architectures: iphoneos-arm"
          echo "Components: main"
          echo "Description: Official Frida Repo"
        ) > Release
        reprepro \
            -Vb . \
            --confdir $GITHUB_WORKSPACE/ios-repo-config \
            --ignore=forbiddenchar \
            includedeb \
            stable \
            debs/frida_${FRIDA_VERSION}_iphoneos-arm.deb
        cp dists/stable/main/binary-iphoneos-arm/Packages.gz .
        rm -f Packages
        gunzip -k Packages.gz
      shell: bash
    - name: Upload iOS package and repo metadata
      run: |
        cd ios-repo
        case ${{ inputs.repo }} in
          production)
            prefix=
            ;;
          development)
            prefix=/dev
           ;;
          *)
            echo "Invalid repo specified" > /dev/stderr
            exit 1
        esac
        aws s3 sync --delete pool/ s3://build.frida.re${prefix}/pool/
        for file in Release Packages Packages.gz; do
          aws s3 cp $file s3://build.frida.re${prefix}/
        done
        for file in Packages Packages.gz; do
          aws s3 cp $file s3://build.frida.re${prefix}/./
        done
        urls_to_invalidate=()
        for file in Release Packages Packages.gz ./Packages ./Packages.gz; do
          urls_to_invalidate+=("https://build.frida.re${prefix}/${file}")
        done
        echo "Invalidating ${urls_to_invalidate[@]}"
        cfcli purge ${urls_to_invalidate[@]}
      shell: bash
