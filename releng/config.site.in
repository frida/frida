# config.site for configure

frida_host_platform=@frida_host_platform@
frida_host_arch=@frida_host_arch@
frida_host_platform_arch=@frida_host_platform_arch@
frida_prefix=@frida_prefix@

test "$prefix" = NONE && prefix="$frida_prefix"

enable_nls=no
enable_silent_rules=yes

frida_warning_flags="-Wall"

case "$PACKAGE_TARNAME" in
  capstone)
    # Takes ages to compile with debug information
    frida_flags="@frida_optimization_flags@ -pipe"
    ;;
  *)
    frida_flags="@frida_optimization_flags@ -pipe @frida_debug_flags@"
    ;;
esac

case $frida_host_platform_arch in
  linux-arm)
    host_alias="arm-linux-gnueabi"
    cross_compiling=yes
    ;;
  linux-armhf)
    host_alias="arm-linux-gnueabihf"
    cross_compiling=yes
    ;;
  linux-mips)
    host_alias="mips-linux-uclibc"
    cross_compiling=yes
    ;;
  linux-mipsel)
    host_alias="mipsel-linux-uclibc"
    cross_compiling=yes
    ;;
  linux-i386)
    host_alias="i686-linux-gnu"
    cross_compiling=yes
    ;;
  linux-x86_64)
    host_alias="x86_64-linux-gnu"
    cross_compiling=no
    ;;
  qnx-i386)
    host_alias="i486-pc-nto-qnx6.6.0"
    cross_compiling=yes
    ;;
  qnx-armeabi)
    host_alias="arm-unknown-nto-qnx6.5.0eabi"
    cross_compiling=yes
    ;;
  qnx-arm)
    host_alias="arm-unknown-nto-qnx6.5.0"
    cross_compiling=yes
    ;;
  android-i386)
    if [ -n "$FRIDA_LEGACY_AUTOTOOLS" ]; then
      host_alias="i686-linux-gnu"
    else
      host_alias="i686-none-linux-android"
    fi
    cross_compiling=yes
    ;;
  android-x86_64)
    if [ -n "$FRIDA_LEGACY_AUTOTOOLS" ]; then
      host_alias="x86_64-linux-gnu"
    else
      host_alias="x86_64-none-linux-android"
    fi
    cross_compiling=yes
    ;;
  android-arm)
    if [ -n "$FRIDA_LEGACY_AUTOTOOLS" ]; then
      host_alias="armv7-linux-eabi"
    else
      host_alias="armv7-none-linux-androideabi"
    fi
    cross_compiling=yes

    frida_flags="$frida_flags -mthumb"
    ;;
  android-arm64)
    if [ -n "$FRIDA_LEGACY_AUTOTOOLS" ]; then
      host_alias="aarch64-linux-gnu"
    else
      host_alias="aarch64-none-linux-android"
    fi
    cross_compiling=yes
    ;;
  macos-i386|ios-i386)
    host_alias="i686-apple-darwin"
    cross_compiling=yes
    ;;
  ios-x86_64)
    host_alias="x86_64-apple-darwin"
    cross_compiling=yes
    ;;
  ios-arm)
    host_alias="arm-apple-darwin"
    cross_compiling=yes

    frida_flags="$frida_flags -mthumb"
    ;;
  ios-arm64)
    host_alias="aarch64-apple-darwin"
    cross_compiling=yes
    ;;
esac

case $frida_host_platform_arch in
  linux-arm|linux-armhf|linux-mips|linux-mipsel|qnx-*)
    enable_gumpp=no
    ;;
  *)
    enable_gumpp=yes
    ;;
esac

# Work around a bug in stdint generation m4, where CFLAGS is overwritten,
# causing this check to conclude that there's no stdint.h support...
ac_cv_header_stdint_t=yes

if [ -x /usr/bin/install ]; then
  ac_cv_path_install="/usr/bin/install -p"
fi

case "$PACKAGE_TARNAME" in
  'xz')
    enable_shared=no
    enable_static=yes
    ;;
  'libunwind')
    enable_shared=no
    enable_static=yes
    enable_coredump=no
    enable_ptrace=no
    enable_setjmp=no
    enable_debug=no
    enable_msabi_support=no
    enable_minidebuginfo=yes

    CFLAGS="$CFLAGS -I$frida_prefix/include"
    LDFLAGS="$LDFLAGS -L$frida_prefix/lib"
    ;;
  'libffi')
    CFLAGS="$CFLAGS -DFFI_MMAP_EXEC_WRIT=1 -DFFI_MMAP_EXEC_SELINUX=0"

    enable_docs=no
    enable_multi_os_directory=no

    enable_shared=no
    enable_static=yes
    ;;
  'glib')
    with_pcre=internal
    enable_debug=minimum
    enable_dtrace=no
    enable_libmount=no
    enable_tests=no

    enable_shared=no
    enable_static=yes

    glib_cv_stack_grows=no
    glib_cv_uscore=no

    case $frida_host_platform in
      android|qnx)
        ac_cv_func_posix_getgrgid_r=no
        ac_cv_func_posix_getpwuid_r=no
        ;;
      *)
        ac_cv_func_posix_getgrgid_r=yes
        ac_cv_func_posix_getpwuid_r=yes
        ;;
    esac

    case $frida_host_platform in
      linux)
        glib_cv_have_qsort_r=yes
        ;;
      macos|ios|android|qnx)
        glib_cv_have_qsort_r=no
        ;;
    esac

    case $frida_host_platform in
      linux|android|macos|ios|qnx)
        enable_proxy_libintl=yes
        ;;
    esac

    CFLAGS="$CFLAGS -I$frida_prefix/include"
    LDFLAGS="$LDFLAGS -L$frida_prefix/lib"
    ;;
  'libgee')
    enable_shared=no
    enable_static=yes
    enable_internal_asserts=no
    enable_consistency_check=no

    CFLAGS="$CFLAGS -Wno-error=implicit-function-declaration"
    ;;
  'vala'|'json-glib')
    enable_shared=no
    enable_static=yes
    ;;
  'capstone')
    enable_shared=no
    enable_static=yes
    enable_maintainer_mode=yes
    frida_flags="$frida_warning_flags $frida_flags"
    ;;
  frida-*)
    enable_maintainer_mode=yes
    frida_flags="$frida_warning_flags $frida_flags"
    ;;
  *)
    frida_flags="$frida_warning_flags $frida_flags"
    ;;
esac

CFLAGS="$CFLAGS $frida_flags"
CXXFLAGS="$CXXFLAGS $frida_flags"
OBJCFLAGS="$OBJCFLAGS $frida_flags"
