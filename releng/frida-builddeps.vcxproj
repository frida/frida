<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{4AFCE7C4-6D9A-4663-B43C-D2E518486910}</ProjectGuid>
    <RootNamespace>frida</RootNamespace>
    <Keyword>Win32Proj</Keyword>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Utility</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
    <WholeProgramOptimization>false</WholeProgramOptimization>
    <PlatformToolset>v141_xp</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Utility</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v141_xp</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Utility</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
    <WholeProgramOptimization>false</WholeProgramOptimization>
    <PlatformToolset>v141_xp</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Utility</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v141_xp</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$(SolutionDir)releng\frida-$(Configuration).props" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$(SolutionDir)releng\frida-$(Configuration).props" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$(SolutionDir)releng\frida-$(Configuration).props" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$(SolutionDir)releng\frida-$(Configuration).props" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.30319.1</_ProjectFileVersion>
  </PropertyGroup>
  <ItemDefinitionGroup>
  </ItemDefinitionGroup>
  <ItemGroup>
    <CustomBuild Include="windows-sdk.txt">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Checking SDK</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">if exist "$(ProjectDir)..\build\sdk-windows\" goto warn

"$(ProjectDir)wget.exe" --dot-style=mega --ca-certificate="$(ProjectDir)ca-bundle.crt" --input-file="$(ProjectDir)windows-sdk.txt" --output-document="$(ProjectDir)..\build\sdk-windows.exe" || exit 1
"$(ProjectDir)..\build\sdk-windows.exe" -o"$(ProjectDir)..\build\" || exit 1
del "$(ProjectDir)..\build\sdk-windows.exe"
goto done

:warn
echo Assuming SDK is up to date - delete build\sdk-windows if in doubt

:done
echo &gt; "$(IntDir)windows-sdk.stamp"
</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(ProjectDir)wget.exe;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(IntDir)windows-sdk.stamp;%(Outputs)</Outputs>
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Checking SDK</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">if exist "$(ProjectDir)..\build\sdk-windows\" goto warn

"$(ProjectDir)wget.exe" --dot-style=mega --ca-certificate="$(ProjectDir)ca-bundle.crt" --input-file="$(ProjectDir)windows-sdk.txt" --output-document="$(ProjectDir)..\build\sdk-windows.exe" || exit 1
"$(ProjectDir)..\build\sdk-windows.exe" -o"$(ProjectDir)..\build\" || exit 1
del "$(ProjectDir)..\build\sdk-windows.exe"
goto done

:warn
echo Assuming SDK is up to date - delete build\sdk-windows if in doubt

:done
echo &gt; "$(IntDir)windows-sdk.stamp"
</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(ProjectDir)wget.exe;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(IntDir)windows-sdk.stamp;%(Outputs)</Outputs>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">Checking SDK</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">if exist "$(ProjectDir)..\build\sdk-windows\" goto warn

"$(ProjectDir)wget.exe" --dot-style=mega --ca-certificate="$(ProjectDir)ca-bundle.crt" --input-file="$(ProjectDir)windows-sdk.txt" --output-document="$(ProjectDir)..\build\sdk-windows.exe" || exit 1
"$(ProjectDir)..\build\sdk-windows.exe" -o"$(ProjectDir)..\build\" || exit 1
del "$(ProjectDir)..\build\sdk-windows.exe"
goto done

:warn
echo Assuming SDK is up to date - delete build\sdk-windows if in doubt

:done
echo &gt; "$(IntDir)windows-sdk.stamp"
</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(ProjectDir)wget.exe;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(IntDir)windows-sdk.stamp;%(Outputs)</Outputs>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Checking SDK</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">if exist "$(ProjectDir)..\build\sdk-windows\" goto warn

"$(ProjectDir)wget.exe" --dot-style=mega --ca-certificate="$(ProjectDir)ca-bundle.crt" --input-file="$(ProjectDir)windows-sdk.txt" --output-document="$(ProjectDir)..\build\sdk-windows.exe" || exit 1
"$(ProjectDir)..\build\sdk-windows.exe" -o"$(ProjectDir)..\build\" || exit 1
del "$(ProjectDir)..\build\sdk-windows.exe"
goto done

:warn
echo Assuming SDK is up to date - delete build\sdk-windows if in doubt

:done
echo &gt; "$(IntDir)windows-sdk.stamp"
</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(ProjectDir)wget.exe;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)windows-sdk.stamp;%(Outputs)</Outputs>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="windows-toolchain.txt">
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">if exist "$(ProjectDir)..\build\toolchain-windows\" goto warn

"$(ProjectDir)wget.exe" --dot-style=mega --ca-certificate="$(ProjectDir)ca-bundle.crt" --input-file="$(ProjectDir)windows-toolchain.txt" --output-document="$(ProjectDir)..\build\toolchain-windows.exe" || exit 1
"$(ProjectDir)..\build\toolchain-windows.exe" -o"$(ProjectDir)..\build\" || exit 1
del "$(ProjectDir)..\build\toolchain-windows.exe"
goto done

:warn
echo Assuming toolchain is up to date - delete build\toolchain-windows if in doubt

:done
echo &gt; "$(IntDir)windows-toolchain.stamp"
</Command>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">if exist "$(ProjectDir)..\build\toolchain-windows\" goto warn

"$(ProjectDir)wget.exe" --dot-style=mega --ca-certificate="$(ProjectDir)ca-bundle.crt" --input-file="$(ProjectDir)windows-toolchain.txt" --output-document="$(ProjectDir)..\build\toolchain-windows.exe" || exit 1
"$(ProjectDir)..\build\toolchain-windows.exe" -o"$(ProjectDir)..\build\" || exit 1
del "$(ProjectDir)..\build\toolchain-windows.exe"
goto done

:warn
echo Assuming toolchain is up to date - delete build\toolchain-windows if in doubt

:done
echo &gt; "$(IntDir)windows-toolchain.stamp"
</Command>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">if exist "$(ProjectDir)..\build\toolchain-windows\" goto warn

"$(ProjectDir)wget.exe" --dot-style=mega --ca-certificate="$(ProjectDir)ca-bundle.crt" --input-file="$(ProjectDir)windows-toolchain.txt" --output-document="$(ProjectDir)..\build\toolchain-windows.exe" || exit 1
"$(ProjectDir)..\build\toolchain-windows.exe" -o"$(ProjectDir)..\build\" || exit 1
del "$(ProjectDir)..\build\toolchain-windows.exe"
goto done

:warn
echo Assuming toolchain is up to date - delete build\toolchain-windows if in doubt

:done
echo &gt; "$(IntDir)windows-toolchain.stamp"
</Command>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">if exist "$(ProjectDir)..\build\toolchain-windows\" goto warn

"$(ProjectDir)wget.exe" --dot-style=mega --ca-certificate="$(ProjectDir)ca-bundle.crt" --input-file="$(ProjectDir)windows-toolchain.txt" --output-document="$(ProjectDir)..\build\toolchain-windows.exe" || exit 1
"$(ProjectDir)..\build\toolchain-windows.exe" -o"$(ProjectDir)..\build\" || exit 1
del "$(ProjectDir)..\build\toolchain-windows.exe"
goto done

:warn
echo Assuming toolchain is up to date - delete build\toolchain-windows if in doubt

:done
echo &gt; "$(IntDir)windows-toolchain.stamp"
</Command>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(IntDir)windows-toolchain.stamp;%(Outputs)</Outputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(IntDir)windows-toolchain.stamp;%(Outputs)</Outputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(IntDir)windows-toolchain.stamp;%(Outputs)</Outputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)windows-toolchain.stamp;%(Outputs)</Outputs>
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Checking toolchain</Message>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(ProjectDir)wget.exe;%(AdditionalInputs)</AdditionalInputs>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">Checking toolchain</Message>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(ProjectDir)wget.exe;%(AdditionalInputs)</AdditionalInputs>
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Checking toolchain</Message>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(ProjectDir)wget.exe;%(AdditionalInputs)</AdditionalInputs>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Checking toolchain</Message>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(ProjectDir)wget.exe;%(AdditionalInputs)</AdditionalInputs>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="generate-version-header.py">
      <FileType>Document</FileType>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
"$(ProjectDir)generate-version-header.py" "$(SolutionDir)build\tmp-windows\frida-version.h" || exit 1
REM. &gt; "$(IntDir)frida-version.stamp"
</Command>
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Generating frida-version.h</Message>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(IntDir)frida-version.stamp</Outputs>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(SolutionDir).git\refs\heads\master</AdditionalInputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">false</LinkObjects>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
"$(ProjectDir)generate-version-header.py" "$(SolutionDir)build\tmp-windows\frida-version.h" || exit 1
REM. &gt; "$(IntDir)frida-version.stamp"
</Command>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">Generating frida-version.h</Message>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(IntDir)frida-version.stamp</Outputs>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(SolutionDir).git\refs\heads\master</AdditionalInputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">false</LinkObjects>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
"$(ProjectDir)generate-version-header.py" "$(SolutionDir)build\tmp-windows\frida-version.h" || exit 1
REM. &gt; "$(IntDir)frida-version.stamp"
</Command>
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating frida-version.h</Message>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(IntDir)frida-version.stamp</Outputs>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(SolutionDir).git\refs\heads\master</AdditionalInputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
"$(ProjectDir)generate-version-header.py" "$(SolutionDir)build\tmp-windows\frida-version.h" || exit 1
REM. &gt; "$(IntDir)frida-version.stamp"
</Command>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating frida-version.h</Message>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)frida-version.stamp</Outputs>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(SolutionDir).git\refs\heads\master</AdditionalInputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="windows-node-modules.txt">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Installing Node.js modules needed for compiling the GumJS runtime</Message>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(IntDir)windows-node-modules.stamp;%(Outputs)</Outputs>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">Installing Node.js modules needed for compiling the GumJS runtime</Message>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(IntDir)windows-node-modules.stamp;%(Outputs)</Outputs>
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Installing Node.js modules needed for compiling the GumJS runtime</Message>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(IntDir)windows-node-modules.stamp;%(Outputs)</Outputs>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Installing Node.js modules needed for compiling the GumJS runtime</Message>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)windows-node-modules.stamp;%(Outputs)</Outputs>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">call npm --version &gt;NUL 2&gt;NUL
if errorlevel 1 (
  echo Node.js not found on your PATH
  exit 1
)
cd "$(ProjectDir)..\frida-gum\bindings\gumjs\"
call npm install || exit 1
echo &gt; "$(IntDir)windows-node-modules.stamp"</Command>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">call npm --version &gt;NUL 2&gt;NUL
if errorlevel 1 (
  echo Node.js not found on your PATH
  exit 1
)
cd "$(ProjectDir)..\frida-gum\bindings\gumjs\"
call npm install || exit 1
echo &gt; "$(IntDir)windows-node-modules.stamp"</Command>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">call npm --version &gt;NUL 2&gt;NUL
if errorlevel 1 (
  echo Node.js not found on your PATH
  exit 1
)
cd "$(ProjectDir)..\frida-gum\bindings\gumjs\"
call npm install || exit 1
echo &gt; "$(IntDir)windows-node-modules.stamp"</Command>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">call npm --version &gt;NUL 2&gt;NUL
if errorlevel 1 (
  echo Node.js not found on your PATH
  exit 1
)
cd "$(ProjectDir)..\frida-gum\bindings\gumjs\"
call npm install || exit 1
echo &gt; "$(IntDir)windows-node-modules.stamp"</Command>
    </CustomBuild>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>
